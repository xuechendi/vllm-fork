Namespace(backend='vllm', dataset=None, input_len=1024, output_len=1024, model='meta-llama/Meta-Llama-3.1-8B-Instruct', tokenizer='meta-llama/Meta-Llama-3.1-8B-Instruct', quantization=None, tensor_parallel_size=1, n=1, num_prompts=96, seed=0, hf_max_batch_size=None, trust_remote_code=False, max_model_len=2048, dtype='auto', gpu_memory_utilization=0.9, enforce_eager=False, kv_cache_dtype='auto', quantization_param_path=None, device='cuda', num_scheduler_steps=1, enable_prefix_caching=False, enable_chunked_prefill=False, max_num_batched_tokens=None, download_dir=None, output_json=None, distributed_executor_backend=None, load_format='auto', disable_async_output_proc=False, async_engine=False, disable_frontend_multiprocessing=False)
INFO 10-24 11:24:13 llm_engine.py:237] Initializing an LLM engine (v0.6.3.post1) with config: model='meta-llama/Meta-Llama-3.1-8B-Instruct', speculative_config=None, tokenizer='meta-llama/Meta-Llama-3.1-8B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=2048, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=meta-llama/Meta-Llama-3.1-8B-Instruct, num_scheduler_steps=1, chunked_prefill_enabled=False multi_step_stream_outputs=True, enable_prefix_caching=False, use_async_output_proc=True, use_cached_outputs=False, mm_processor_kwargs=None)
INFO 10-24 11:24:14 model_runner.py:1059] Starting to load model meta-llama/Meta-Llama-3.1-8B-Instruct...
INFO 10-24 11:24:14 weight_utils.py:243] Using model weights format ['*.safetensors']
Loading safetensors checkpoint shards:   0% Completed | 0/4 [00:00<?, ?it/s]
Loading safetensors checkpoint shards:  25% Completed | 1/4 [00:00<00:01,  1.55it/s]
Loading safetensors checkpoint shards:  50% Completed | 2/4 [00:01<00:01,  1.48it/s]
Loading safetensors checkpoint shards:  75% Completed | 3/4 [00:01<00:00,  2.18it/s]
Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:02<00:00,  1.85it/s]
Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:02<00:00,  1.81it/s]

INFO 10-24 11:24:17 model_runner.py:1070] Loading model weights took 14.9888 GB
INFO 10-24 11:24:17 gpu_executor.py:122] # GPU blocks: 27984, # CPU blocks: 2048
INFO 10-24 11:24:17 gpu_executor.py:126] Maximum concurrency for 2048 tokens per request: 218.62x
INFO 10-24 11:24:19 model_runner.py:1398] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 10-24 11:24:19 model_runner.py:1402] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 10-24 11:24:24 model_runner.py:1526] Graph capturing finished in 6 secs.
Processed prompts:   0%|          | 0/96 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   1%|          | 1/96 [00:20<32:33, 20.56s/it, est. speed input: 49.80 toks/s, output: 49.80 toks/s]Processed prompts: 100%|██████████| 96/96 [00:20<00:00,  4.67it/s, est. speed input: 4780.65 toks/s, output: 4780.65 toks/s]
['First Token: bs == torch.Size([2048]), avg_time is 52.910287333323446 msecs, counts is 48\n']
['Next Token: bs == torch.Size([96]), avg_time is 16.16877813673767 msecs, counts is 1024\n']
['model fwd: bs == 2048, avg_time is 51.421146074930824 msecs, counts is 49\n', 'model fwd: bs == 96, avg_time is 13.354941011057804 msecs, counts is 1024\n']
====== Warmup ======
Throughput: 4.66 requests/s, 
Total Throughput: 9536.88 tokens/s
Input Throughput: 4768.44 tokens/s
Output Throughput: 4768.44 tokens/s
Processed prompts:   0%|          | 0/96 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   1%|          | 1/96 [00:20<32:58, 20.83s/it, est. speed input: 49.16 toks/s, output: 49.16 toks/s]Processed prompts: 100%|██████████| 96/96 [00:20<00:00,  4.61it/s, est. speed input: 4719.35 toks/s, output: 4719.35 toks/s]
['First Token: bs == torch.Size([2048]), avg_time is 52.96105274991684 msecs, counts is 48\n']
['Next Token: bs == torch.Size([96]), avg_time is 16.180295446268644 msecs, counts is 1024\n']
['model fwd: bs == 2048, avg_time is 51.58314157039561 msecs, counts is 48\n', 'model fwd: bs == 96, avg_time is 13.35427880869816 msecs, counts is 1024\n']
====== Warmup ======
Throughput: 4.60 requests/s, 
Total Throughput: 9415.27 tokens/s
Input Throughput: 4707.63 tokens/s
Output Throughput: 4707.63 tokens/s
Processed prompts:   0%|          | 0/96 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   1%|          | 1/96 [00:20<32:46, 20.70s/it, est. speed input: 49.47 toks/s, output: 49.47 toks/s]Processed prompts: 100%|██████████| 96/96 [00:20<00:00,  4.64it/s, est. speed input: 4748.41 toks/s, output: 4748.41 toks/s]
['First Token: bs == torch.Size([2048]), avg_time is 53.01084722911279 msecs, counts is 48\n']
['Next Token: bs == torch.Size([96]), avg_time is 16.18665528711105 msecs, counts is 1024\n']
['model fwd: bs == 2048, avg_time is 51.61508235525578 msecs, counts is 48\n', 'model fwd: bs == 96, avg_time is 13.349023254036554 msecs, counts is 1024\n']
====== Warmup ======
Throughput: 4.63 requests/s, 
Total Throughput: 9474.11 tokens/s
Input Throughput: 4737.06 tokens/s
Output Throughput: 4737.06 tokens/s
====== Final Result ======
Throughput: 4.63 requests/s, 
duration: 20.75 secs, inter-token latency: 20.27 msecs
Total Throughput: 9474.11 tokens/s
Input Throughput: 4737.06 tokens/s
Output Throughput: 4737.06 tokens/s
