Namespace(backend='vllm', dataset=None, input_len=1024, output_len=1024, model='meta-llama/Meta-Llama-3.1-8B-Instruct', tokenizer='meta-llama/Meta-Llama-3.1-8B-Instruct', quantization=None, tensor_parallel_size=1, n=1, num_prompts=64, seed=0, hf_max_batch_size=None, trust_remote_code=False, max_model_len=2048, dtype='auto', gpu_memory_utilization=0.9, enforce_eager=False, kv_cache_dtype='auto', quantization_param_path=None, device='cuda', num_scheduler_steps=1, enable_prefix_caching=False, enable_chunked_prefill=False, max_num_batched_tokens=None, download_dir=None, output_json=None, distributed_executor_backend=None, load_format='auto', disable_async_output_proc=False, async_engine=False, disable_frontend_multiprocessing=False)
INFO 10-24 11:25:34 llm_engine.py:237] Initializing an LLM engine (v0.6.3.post1) with config: model='meta-llama/Meta-Llama-3.1-8B-Instruct', speculative_config=None, tokenizer='meta-llama/Meta-Llama-3.1-8B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=2048, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=meta-llama/Meta-Llama-3.1-8B-Instruct, num_scheduler_steps=1, chunked_prefill_enabled=False multi_step_stream_outputs=True, enable_prefix_caching=False, use_async_output_proc=True, use_cached_outputs=False, mm_processor_kwargs=None)
INFO 10-24 11:25:35 model_runner.py:1059] Starting to load model meta-llama/Meta-Llama-3.1-8B-Instruct...
INFO 10-24 11:25:36 weight_utils.py:243] Using model weights format ['*.safetensors']
Loading safetensors checkpoint shards:   0% Completed | 0/4 [00:00<?, ?it/s]
Loading safetensors checkpoint shards:  25% Completed | 1/4 [00:00<00:01,  1.53it/s]
Loading safetensors checkpoint shards:  50% Completed | 2/4 [00:01<00:01,  1.47it/s]
Loading safetensors checkpoint shards:  75% Completed | 3/4 [00:01<00:00,  2.16it/s]
Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:02<00:00,  1.83it/s]
Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:02<00:00,  1.80it/s]

INFO 10-24 11:25:38 model_runner.py:1070] Loading model weights took 14.9888 GB
INFO 10-24 11:25:38 gpu_executor.py:122] # GPU blocks: 27984, # CPU blocks: 2048
INFO 10-24 11:25:38 gpu_executor.py:126] Maximum concurrency for 2048 tokens per request: 218.62x
INFO 10-24 11:25:40 model_runner.py:1398] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 10-24 11:25:40 model_runner.py:1402] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 10-24 11:25:46 model_runner.py:1526] Graph capturing finished in 6 secs.
Processed prompts:   0%|          | 0/64 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   2%|▏         | 1/64 [00:15<16:31, 15.73s/it, est. speed input: 65.08 toks/s, output: 65.08 toks/s]Processed prompts: 100%|██████████| 64/64 [00:15<00:00,  4.07it/s, est. speed input: 4165.20 toks/s, output: 4165.20 toks/s]
['First Token: bs == torch.Size([2048]), avg_time is 53.071161968802016 msecs, counts is 32\n']
['Next Token: bs == torch.Size([64]), avg_time is 12.824434471672141 msecs, counts is 1024\n']
['model fwd: bs == 2048, avg_time is 51.594581842422485 msecs, counts is 33\n', 'model fwd: bs == 64, avg_time is 10.668414836521839 msecs, counts is 1024\n']
====== Warmup ======
Throughput: 4.06 requests/s, 
Total Throughput: 8311.82 tokens/s
Input Throughput: 4155.91 tokens/s
Output Throughput: 4155.91 tokens/s
Processed prompts:   0%|          | 0/64 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   2%|▏         | 1/64 [00:15<16:40, 15.89s/it, est. speed input: 64.45 toks/s, output: 64.45 toks/s]Processed prompts: 100%|██████████| 64/64 [00:15<00:00,  4.03it/s, est. speed input: 4124.51 toks/s, output: 4124.51 toks/s]
['First Token: bs == torch.Size([2048]), avg_time is 52.86934206247906 msecs, counts is 32\n']
['Next Token: bs == torch.Size([64]), avg_time is 12.812460620099664 msecs, counts is 1024\n']
['model fwd: bs == 2048, avg_time is 51.52147305396296 msecs, counts is 32\n', 'model fwd: bs == 64, avg_time is 10.666920829728202 msecs, counts is 1024\n']
====== Warmup ======
Throughput: 4.02 requests/s, 
Total Throughput: 8230.63 tokens/s
Input Throughput: 4115.31 tokens/s
Output Throughput: 4115.31 tokens/s
Processed prompts:   0%|          | 0/64 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   2%|▏         | 1/64 [00:15<16:41, 15.90s/it, est. speed input: 64.40 toks/s, output: 64.40 toks/s]Processed prompts: 100%|██████████| 64/64 [00:15<00:00,  4.02it/s, est. speed input: 4121.48 toks/s, output: 4121.48 toks/s]
['First Token: bs == torch.Size([2048]), avg_time is 52.852758250026 msecs, counts is 32\n']
['Next Token: bs == torch.Size([64]), avg_time is 12.817068747062343 msecs, counts is 1024\n']
['model fwd: bs == 2048, avg_time is 51.46436752811555 msecs, counts is 32\n', 'model fwd: bs == 64, avg_time is 10.666772042551349 msecs, counts is 1024\n']
====== Warmup ======
Throughput: 4.02 requests/s, 
Total Throughput: 8226.06 tokens/s
Input Throughput: 4113.03 tokens/s
Output Throughput: 4113.03 tokens/s
====== Final Result ======
Throughput: 4.02 requests/s, 
duration: 15.93 secs, inter-token latency: 15.56 msecs
Total Throughput: 8226.06 tokens/s
Input Throughput: 4113.03 tokens/s
Output Throughput: 4113.03 tokens/s
